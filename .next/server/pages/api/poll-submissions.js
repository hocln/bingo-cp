"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/poll-submissions";
exports.ids = ["pages/api/poll-submissions"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpoll-submissions&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpoll-submissions.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpoll-submissions&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpoll-submissions.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_poll_submissions_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages\\api\\poll-submissions.ts */ \"(api-node)/./pages/api/poll-submissions.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_poll_submissions_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_poll_submissions_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/poll-submissions\",\n        pathname: \"/api/poll-submissions\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_poll_submissions_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    projectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/poll-submissions\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: undefined,\n                multiZoneDraftMode: Boolean(\"false\"),\n                trustHostHeader: undefined,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/poll-submissions\",\n                projectDir:  false || '',\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpoll-submissions&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpoll-submissions.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/checkSolvesLogic.ts":
/*!***************************************!*\
  !*** ./pages/api/checkSolvesLogic.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkSolvesLogic: () => (/* binding */ checkSolvesLogic)\n/* harmony export */ });\n// src/lib/checkSolvesLogic.ts\nasync function checkSolvesLogic(problems, players) {\n    const problemKey = (p)=>`${p.contestId}-${p.index}`;\n    const trackedProblems = new Set(problems.map(problemKey));\n    console.log(\"Prob: \", trackedProblems);\n    // Map: problemKey -> { team: string, submissionId: number, time: number }\n    const claims = {};\n    // console.log(\"players: \", players)\n    for (const player of players){\n        try {\n            const res = await fetch(`https://codeforces.com/api/user.status?handle=${player.handle}&from=1&count=10`);\n            const data = await res.json();\n            if (data.status !== 'OK') continue;\n            // console.log(player)\n            // console.log('subs: ', data)\n            // console.log('problems: ', trackedProblems)\n            const submissions = data.result;\n            for (const sub of submissions){\n                if (sub.verdict !== 'OK') continue;\n                const key = `${sub.problem.contestId}-${sub.problem.index}`;\n                if (!trackedProblems.has(key)) continue;\n                const existing = claims[key];\n                if (!existing || sub.id < existing.id) {\n                    claims[key] = {\n                        team: player.team,\n                        time: sub.creationTimeSeconds,\n                        id: sub.id\n                    };\n                }\n            }\n        // console.log('here we gooooo: ', claims)\n        } catch (err) {\n            console.error(`Error fetching for ${player.handle}`, err);\n        }\n    }\n    // Final map: problemKey -> teamColor\n    const result = {};\n    for (const [key, claim] of Object.entries(claims)){\n        result[key] = claim.team;\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS9jaGVja1NvbHZlc0xvZ2ljLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSw4QkFBOEI7QUFZdkIsZUFBZUEsaUJBQWlCQyxRQUFtQixFQUFFQyxPQUFpQjtJQUMzRSxNQUFNQyxhQUFhLENBQUNDLElBQWUsR0FBR0EsRUFBRUMsU0FBUyxDQUFDLENBQUMsRUFBRUQsRUFBRUUsS0FBSyxFQUFFO0lBQzlELE1BQU1DLGtCQUFrQixJQUFJQyxJQUFJUCxTQUFTUSxHQUFHLENBQUNOO0lBQzdDTyxRQUFRQyxHQUFHLENBQUMsVUFBVUo7SUFFdEIsMEVBQTBFO0lBQzFFLE1BQU1LLFNBQXFFLENBQUM7SUFDNUUsb0NBQW9DO0lBQ3BDLEtBQUssTUFBTUMsVUFBVVgsUUFBUztRQUM1QixJQUFJO1lBQ0YsTUFBTVksTUFBTSxNQUFNQyxNQUFNLENBQUMsOENBQThDLEVBQUVGLE9BQU9HLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztZQUN4RyxNQUFNQyxPQUFPLE1BQU1ILElBQUlJLElBQUk7WUFDM0IsSUFBSUQsS0FBS0UsTUFBTSxLQUFLLE1BQU07WUFDMUIsc0JBQXNCO1lBQ3RCLDhCQUE4QjtZQUM5Qiw2Q0FBNkM7WUFDN0MsTUFBTUMsY0FBY0gsS0FBS0ksTUFBTTtZQU8vQixLQUFLLE1BQU1DLE9BQU9GLFlBQWE7Z0JBQzdCLElBQUlFLElBQUlDLE9BQU8sS0FBSyxNQUFNO2dCQUMxQixNQUFNQyxNQUFNLEdBQUdGLElBQUlHLE9BQU8sQ0FBQ3BCLFNBQVMsQ0FBQyxDQUFDLEVBQUVpQixJQUFJRyxPQUFPLENBQUNuQixLQUFLLEVBQUU7Z0JBQzNELElBQUksQ0FBQ0MsZ0JBQWdCbUIsR0FBRyxDQUFDRixNQUFNO2dCQUUvQixNQUFNRyxXQUFXZixNQUFNLENBQUNZLElBQUk7Z0JBQzVCLElBQ0UsQ0FBQ0csWUFDREwsSUFBSU0sRUFBRSxHQUFHRCxTQUFTQyxFQUFFLEVBQ3BCO29CQUNBaEIsTUFBTSxDQUFDWSxJQUFJLEdBQUc7d0JBQ1pLLE1BQU1oQixPQUFPZ0IsSUFBSTt3QkFDakJDLE1BQU1SLElBQUlTLG1CQUFtQjt3QkFDN0JILElBQUlOLElBQUlNLEVBQUU7b0JBQ1o7Z0JBQ0Y7WUFDRjtRQUNBLDBDQUEwQztRQUM1QyxFQUFFLE9BQU9JLEtBQUs7WUFDWnRCLFFBQVF1QixLQUFLLENBQUMsQ0FBQyxtQkFBbUIsRUFBRXBCLE9BQU9HLE1BQU0sRUFBRSxFQUFFZ0I7UUFDdkQ7SUFDRjtJQUVBLHFDQUFxQztJQUNyQyxNQUFNWCxTQUFpQyxDQUFDO0lBQ3hDLEtBQUssTUFBTSxDQUFDRyxLQUFLVSxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ3hCLFFBQVM7UUFDakRTLE1BQU0sQ0FBQ0csSUFBSSxHQUFHVSxNQUFNTCxJQUFJO0lBQzFCO0lBRUEsT0FBT1I7QUFDVCIsInNvdXJjZXMiOlsiRDpcXGJpbmdvLWNwXFxiaW5nby1jcFxcYmluZ28tY3BcXHBhZ2VzXFxhcGlcXGNoZWNrU29sdmVzTG9naWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2xpYi9jaGVja1NvbHZlc0xvZ2ljLnRzXG5cbmV4cG9ydCB0eXBlIFByb2JsZW0gPSB7XG4gIGNvbnRlc3RJZDogbnVtYmVyXG4gIGluZGV4OiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgUGxheWVyID0ge1xuICBoYW5kbGU6IHN0cmluZ1xuICB0ZWFtOiBzdHJpbmdcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrU29sdmVzTG9naWMocHJvYmxlbXM6IFByb2JsZW1bXSwgcGxheWVyczogUGxheWVyW10pIHtcbiAgY29uc3QgcHJvYmxlbUtleSA9IChwOiBQcm9ibGVtKSA9PiBgJHtwLmNvbnRlc3RJZH0tJHtwLmluZGV4fWBcbiAgY29uc3QgdHJhY2tlZFByb2JsZW1zID0gbmV3IFNldChwcm9ibGVtcy5tYXAocHJvYmxlbUtleSkpXG4gIGNvbnNvbGUubG9nKFwiUHJvYjogXCIsIHRyYWNrZWRQcm9ibGVtcyk7XG5cbiAgLy8gTWFwOiBwcm9ibGVtS2V5IC0+IHsgdGVhbTogc3RyaW5nLCBzdWJtaXNzaW9uSWQ6IG51bWJlciwgdGltZTogbnVtYmVyIH1cbiAgY29uc3QgY2xhaW1zOiBSZWNvcmQ8c3RyaW5nLCB7IHRlYW06IHN0cmluZzsgdGltZTogbnVtYmVyOyBpZDogbnVtYmVyIH0+ID0ge31cbiAgLy8gY29uc29sZS5sb2coXCJwbGF5ZXJzOiBcIiwgcGxheWVycylcbiAgZm9yIChjb25zdCBwbGF5ZXIgb2YgcGxheWVycykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9hcGkvdXNlci5zdGF0dXM/aGFuZGxlPSR7cGxheWVyLmhhbmRsZX0mZnJvbT0xJmNvdW50PTEwYClcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpXG4gICAgICBpZiAoZGF0YS5zdGF0dXMgIT09ICdPSycpIGNvbnRpbnVlXG4gICAgICAvLyBjb25zb2xlLmxvZyhwbGF5ZXIpXG4gICAgICAvLyBjb25zb2xlLmxvZygnc3ViczogJywgZGF0YSlcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdwcm9ibGVtczogJywgdHJhY2tlZFByb2JsZW1zKVxuICAgICAgY29uc3Qgc3VibWlzc2lvbnMgPSBkYXRhLnJlc3VsdCBhcyBBcnJheTx7XG4gICAgICAgIGlkOiBudW1iZXIsXG4gICAgICAgIGNyZWF0aW9uVGltZVNlY29uZHM6IG51bWJlcixcbiAgICAgICAgcHJvYmxlbTogeyBjb250ZXN0SWQ6IG51bWJlcjsgaW5kZXg6IHN0cmluZyB9LFxuICAgICAgICB2ZXJkaWN0OiBzdHJpbmdcbiAgICAgIH0+XG5cbiAgICAgIGZvciAoY29uc3Qgc3ViIG9mIHN1Ym1pc3Npb25zKSB7XG4gICAgICAgIGlmIChzdWIudmVyZGljdCAhPT0gJ09LJykgY29udGludWVcbiAgICAgICAgY29uc3Qga2V5ID0gYCR7c3ViLnByb2JsZW0uY29udGVzdElkfS0ke3N1Yi5wcm9ibGVtLmluZGV4fWBcbiAgICAgICAgaWYgKCF0cmFja2VkUHJvYmxlbXMuaGFzKGtleSkpIGNvbnRpbnVlXG5cbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBjbGFpbXNba2V5XVxuICAgICAgICBpZiAoXG4gICAgICAgICAgIWV4aXN0aW5nIHx8XG4gICAgICAgICAgc3ViLmlkIDwgZXhpc3RpbmcuaWRcbiAgICAgICAgKSB7XG4gICAgICAgICAgY2xhaW1zW2tleV0gPSB7XG4gICAgICAgICAgICB0ZWFtOiBwbGF5ZXIudGVhbSxcbiAgICAgICAgICAgIHRpbWU6IHN1Yi5jcmVhdGlvblRpbWVTZWNvbmRzLFxuICAgICAgICAgICAgaWQ6IHN1Yi5pZCxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGNvbnNvbGUubG9nKCdoZXJlIHdlIGdvb29vbzogJywgY2xhaW1zKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgZm9yICR7cGxheWVyLmhhbmRsZX1gLCBlcnIpXG4gICAgfVxuICB9XG5cbiAgLy8gRmluYWwgbWFwOiBwcm9ibGVtS2V5IC0+IHRlYW1Db2xvclxuICBjb25zdCByZXN1bHQ6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fVxuICBmb3IgKGNvbnN0IFtrZXksIGNsYWltXSBvZiBPYmplY3QuZW50cmllcyhjbGFpbXMpKSB7XG4gICAgcmVzdWx0W2tleV0gPSBjbGFpbS50ZWFtXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG4iXSwibmFtZXMiOlsiY2hlY2tTb2x2ZXNMb2dpYyIsInByb2JsZW1zIiwicGxheWVycyIsInByb2JsZW1LZXkiLCJwIiwiY29udGVzdElkIiwiaW5kZXgiLCJ0cmFja2VkUHJvYmxlbXMiLCJTZXQiLCJtYXAiLCJjb25zb2xlIiwibG9nIiwiY2xhaW1zIiwicGxheWVyIiwicmVzIiwiZmV0Y2giLCJoYW5kbGUiLCJkYXRhIiwianNvbiIsInN0YXR1cyIsInN1Ym1pc3Npb25zIiwicmVzdWx0Iiwic3ViIiwidmVyZGljdCIsImtleSIsInByb2JsZW0iLCJoYXMiLCJleGlzdGluZyIsImlkIiwidGVhbSIsInRpbWUiLCJjcmVhdGlvblRpbWVTZWNvbmRzIiwiZXJyIiwiZXJyb3IiLCJjbGFpbSIsIk9iamVjdCIsImVudHJpZXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/checkSolvesLogic.ts\n");

/***/ }),

/***/ "(api-node)/./pages/api/checkSolvesLogicIOI.ts":
/*!******************************************!*\
  !*** ./pages/api/checkSolvesLogicIOI.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkSolvesLogicIOI: () => (/* binding */ checkSolvesLogicIOI)\n/* harmony export */ });\n// checkSolvesLogicIOI.ts\n// IMPORTANT: adapt fetchSubmissionsForHandle to your API if needed\n// NOTE: added optional `problemIndex` param for compatibility (not required)\nasync function fetchSubmissionsForHandle(handle, problemIndex) {\n    const API_BASE = process.env.DMOJ_API_BASE ?? \"https://dmoj.ca/api/v2\";\n    const API_TOKEN = process.env.DMOJ_API_TOKEN ?? \"\";\n    const headers = {\n        Accept: \"application/json\"\n    };\n    if (API_TOKEN) headers[\"Authorization\"] = `Bearer ${API_TOKEN}`;\n    // Try a couple shapes commonly used\n    const url = `https://dmoj.ca/api/v2/submissions?username=${handle}&problem=joi13op3`;\n    try {\n        const r = await fetch(url, {\n            headers\n        });\n        // console.log(\"NG\")\n        if (!r.ok) return r;\n        const j = await r.json();\n        const arr = j.submissions ?? j.results ?? j.data ?? j;\n        if (Array.isArray(arr)) return arr;\n    } catch (e) {\n    // try next\n    }\n    return [];\n}\n/** normalize a submission's problem identity to key string like \"contestId-index\" */ function submissionProblemKey(sub) {\n    const prob = sub.problem ?? sub.problem_info ?? sub.problem_id ?? sub.task ?? null;\n    let contest = null, index = null;\n    if (prob) {\n        contest = prob.contest ?? prob.contest_id ?? prob.contestId ?? prob.problemset ?? prob.set;\n        index = prob.index ?? prob.code ?? prob.problem_code ?? prob.alias;\n    } else {\n        contest = sub.contest ?? sub.contest_id ?? sub.contestId;\n        index = sub.index ?? sub.code ?? sub.problem_code;\n    }\n    if (!contest || !index) return null;\n    return `${contest}-${index}`;\n}\n/** get numeric score and timestamp (seconds) from a submission */ function parseSubScoreAndTs(sub) {\n    const score = typeof sub.score === \"number\" ? sub.score : typeof sub.points === \"number\" ? sub.points : typeof sub.judge_score === \"number\" ? sub.judge_score : null;\n    const verdict = (sub.verdict ?? sub.result ?? sub.status ?? \"\").toString().toLowerCase();\n    let numericScore = 0;\n    if (score !== null) numericScore = score;\n    else if (verdict === \"ac\" || verdict === \"ok\" || verdict.includes(\"accepted\")) numericScore = sub.maxPoints ?? sub.max_points ?? 100;\n    // timestamp: massage different names\n    let ts = 0;\n    if (typeof sub.creationTimeSeconds === \"number\") ts = sub.creationTimeSeconds;\n    else if (typeof sub.timestamp === \"number\") ts = sub.timestamp;\n    else if (sub.timestamp) ts = Math.floor(new Date(sub.timestamp).getTime() / 1000);\n    else if (sub.created_at) ts = Math.floor(new Date(sub.created_at).getTime() / 1000);\n    return {\n        numericScore,\n        ts\n    };\n}\n/** Robust check whether a submission corresponds to a Problem object\r\n *  Handles shapes like:\r\n *   - submission.problem = { contest: 'ioi08', index: 'p3' }\r\n *   - submission.problem = 'ioi08p3' (string)\r\n *   - top-level fields like submission.code, submission.problem_code\r\n */ function submissionMatchesProblem(sub, problem) {\n    // Desired key in dash form e.g. \"ioi08-p3\"\n    const wantedDashKey = `${String(problem.contestId)}-${String(problem.index)}`.toLowerCase();\n    // Also canonical without dash e.g. \"ioi08p3\"\n    const wantedFlatKey = `${String(problem.contestId)}${String(problem.index)}`.toLowerCase();\n    // 1) Try structured key\n    const dashKey = submissionProblemKey(sub);\n    if (dashKey && String(dashKey).toLowerCase() === wantedDashKey) return true;\n    // 2) Try if submission contains string code forms\n    const subProb = sub.problem ?? sub.problem_info ?? null;\n    const candidates = [];\n    if (typeof subProb === \"string\") candidates.push(subProb);\n    else if (subProb && typeof subProb === \"object\") {\n        candidates.push(String(subProb.code ?? subProb.alias ?? subProb.problem_code ?? \"\"));\n    }\n    // top-level possibilities\n    candidates.push(String(sub.problem_code ?? sub.code ?? sub.task_code ?? sub.alias ?? \"\"));\n    for (const c of candidates){\n        if (!c) continue;\n        const s = String(c).toLowerCase();\n        if (s === wantedFlatKey || s === wantedDashKey.replace('-', '') || s === wantedDashKey) return true;\n        // some instances include punctuation; strip non-alphanumerics and compare\n        const stripped = s.replace(/[^a-z0-9]/g, '');\n        if (stripped === wantedFlatKey.replace(/[^a-z0-9]/g, '')) return true;\n    }\n    return false;\n}\n/**\r\n * problems: list of problems to evaluate (contestId/index)\r\n * players: list of players (handle + team)\r\n * matchStartISO: ISO string of match start (only submissions >= this are considered)\r\n * matchEndISO: optional ISO string of match end (only submissions <= this are considered)\r\n */ async function checkSolvesLogicIOI(problems, players, matchStartISO, matchEndISO) {\n    const matchStartTs = Math.floor(new Date(matchStartISO).getTime() / 1000);\n    const matchEndTs = matchEndISO ? Math.floor(new Date(matchEndISO).getTime() / 1000) : Number.MAX_SAFE_INTEGER;\n    // best score per user per problem during match\n    const bestPerUser = {};\n    console.log(\"PPPPP: \", players.length);\n    console.log(\"PPPPPS: \", problems.length);\n    // iterate problems -> players -> submissions (per your requested flow)\n    for (const problem of problems){\n        const key = `${problem.contestId}-${problem.index}`; // e.g. 'ioi08-p3'\n        for (const player of players){\n            try {\n                // fetch all submissions for handle (we pass problem.index as optional hint; fetch function may ignore it)\n                const subs = await fetchSubmissionsForHandle(player.handle, problem.index);\n                console.log(\"OH NO\", subs);\n                if (!Array.isArray(subs) || subs.length === 0) continue;\n                console.log(\"SSSSSS: \", subs);\n                for (const sub of subs){\n                    // first, check if this submission refers to the current problem\n                    if (!submissionMatchesProblem(sub, problem)) continue;\n                    // parse timestamp & score\n                    const { numericScore, ts } = parseSubScoreAndTs(sub);\n                    if (!ts || ts < matchStartTs || ts > matchEndTs) continue; // only count submissions inside match window\n                    if (!numericScore || numericScore <= 0) continue; // ignore zero-score submissions\n                    // record into bestPerUser\n                    bestPerUser[player.handle] ??= {};\n                    const prev = bestPerUser[player.handle][key];\n                    // For IOI: prefer larger score. If equal, prefer earlier timestamp (smaller ts).\n                    if (!prev || numericScore > prev.score || numericScore === prev.score && ts < prev.timestamp) {\n                        bestPerUser[player.handle][key] = {\n                            score: numericScore,\n                            timestamp: ts\n                        };\n                    }\n                }\n            } catch (err) {\n                // keep going with other players/problems even if one fetch fails\n                console.error(\"fetch error for handle\", player.handle, \"problem\", key, err);\n            }\n        }\n    }\n    // Convert to best team-per-problem using IOI rules (score higher wins; tie -> earlier timestamp)\n    const bestPerProblem = {};\n    for (const problem of problems){\n        const key = `${problem.contestId}-${problem.index}`;\n        let bestScore = -Infinity;\n        let bestTeam = null;\n        let bestTs = Number.MAX_SAFE_INTEGER;\n        let bestHandle;\n        for (const player of players){\n            const userBest = bestPerUser[player.handle]?.[key];\n            if (!userBest) continue;\n            const s = userBest.score;\n            const ts = userBest.timestamp;\n            if (s > bestScore || s === bestScore && ts < bestTs) {\n                bestScore = s;\n                bestTeam = player.team;\n                bestTs = ts;\n                bestHandle = player.handle;\n            }\n        }\n        if (bestTeam !== null && bestScore > 0) {\n            bestPerProblem[key] = {\n                team: bestTeam,\n                score: bestScore,\n                timestamp: new Date(bestTs * 1000).toISOString(),\n                handle: bestHandle\n            };\n        }\n    }\n    return bestPerProblem;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/checkSolvesLogicIOI.ts\n");

/***/ }),

/***/ "(api-node)/./pages/api/poll-submissions.ts":
/*!***************************************!*\
  !*** ./pages/api/poll-submissions.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/app/lib/prisma */ \"(api-node)/./src/app/lib/prisma.ts\");\n/* harmony import */ var _checkSolvesLogic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./checkSolvesLogic */ \"(api-node)/./pages/api/checkSolvesLogic.ts\");\n/* harmony import */ var _checkSolvesLogicIOI__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./checkSolvesLogicIOI */ \"(api-node)/./pages/api/checkSolvesLogicIOI.ts\");\n\n\n\nasync function fetchReplacementProblem(exclude, minRating, maxRating, handles) {\n    try {\n        const res = await fetch('http://localhost:3000/api/getProblems', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                minRating: minRating ?? 800,\n                maxRating: maxRating ?? 3500,\n                userHandles: handles,\n                // optionally include excludes if you implement that on getProblems\n                // excludeProblems: exclude,\n                count: 1,\n                exculde: exclude\n            })\n        });\n        if (!res.ok) return null;\n        const data = await res.json();\n        // console.log(\"Daa: \", data);\n        return (data.problems && data.problems[0]) ?? null;\n    } catch (err) {\n        console.error('fetchReplacementProblem error', err);\n        return null;\n    }\n}\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method Not Allowed'\n        });\n    }\n    // console.log('Request body:', req.body);\n    try {\n        const { matchId } = req.body;\n        if (!matchId) return res.status(400).json({\n            error: 'matchId required'\n        });\n        // console.log('THE IID:', matchId)\n        // console.log('THE REAL STUFF:', req.body)\n        const match = await _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.findUnique({\n            where: {\n                id: matchId\n            },\n            include: {\n                problems: true,\n                teams: {\n                    include: {\n                        members: true\n                    }\n                },\n                solveLog: {\n                    include: {\n                        problem: true\n                    }\n                }\n            }\n        });\n        // console.log('Created match object:', match);\n        // console.log('DONE2')\n        if (!match) {\n            return res.status(404).json({\n                error: 'Match not found'\n            });\n        }\n        // console.log('DONE3')\n        console.log(\"Match Problems: \", match.problems);\n        const problems = match.problems.filter((p)=>p.active === true).map((p)=>({\n                contestId: p.contestId,\n                index: p.index\n            }));\n        // console.log('THE REAL STUFF:', problems)\n        const players = match.teams.flatMap((team)=>team.members.map((member)=>({\n                    handle: member.handle,\n                    team: team.color\n                })));\n        // compute match window used by IOI logic\n        const matchStart = new Date(match.startTime);\n        const matchEnd = new Date(matchStart.getTime() + match.durationMinutes * 60000);\n        // console.log(\"WHHHHHHHHHHHHAT\");\n        if (match.mode === 'ioi') {\n            // IOI mode: get best scores per problem\n            console.log(\"ALIVE\");\n            const claims = await (0,_checkSolvesLogicIOI__WEBPACK_IMPORTED_MODULE_2__.checkSolvesLogicIOI)(problems, players, matchStart.toISOString(), matchEnd.toISOString());\n            // claims: { '1234-A': { team, score, timestamp, handle } }\n            for (const [key, claim] of Object.entries(claims)){\n                const dash = key.lastIndexOf('-');\n                const contestIdStr = key.slice(0, dash);\n                const index = key.slice(dash + 1);\n                const contestIdNum = Number(contestIdStr);\n                // find existing by comparing as strings to be robust (DB may store numeric or string IDs)\n                const existing = match.solveLog.find((s)=>String(s.contestId) === contestIdStr && s.index === index);\n                if (!existing) {\n                    // create only if score > 0\n                    if ((claim.score ?? 0) > 0) {\n                        await _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.solveLog.create({\n                            data: {\n                                matchId: match.id,\n                                contestId: Number.isNaN(contestIdNum) ? 0 : contestIdNum,\n                                index,\n                                team: claim.team,\n                                handle: claim.handle ?? '',\n                                timestamp: new Date(claim.timestamp),\n                                score: claim.score ?? undefined\n                            }\n                        });\n                    }\n                } else {\n                    const oldScore = existing.score ?? 0;\n                    if ((claim.score ?? 0) > oldScore) {\n                        await _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.solveLog.update({\n                            where: {\n                                id: existing.id\n                            },\n                            data: {\n                                team: claim.team,\n                                handle: claim.handle ?? existing.handle,\n                                timestamp: new Date(claim.timestamp),\n                                score: claim.score ?? existing.score\n                            }\n                        });\n                    } else if ((claim.score ?? 0) === oldScore) {\n                        // optional: earliest timestamp tie-break\n                        if (new Date(claim.timestamp) < existing.timestamp) {\n                            await _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.solveLog.update({\n                                where: {\n                                    id: existing.id\n                                },\n                                data: {\n                                    team: claim.team,\n                                    timestamp: new Date(claim.timestamp),\n                                    handle: claim.handle ?? existing.handle\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        } else {\n            // console.log('ok?')\n            // console.log(\"Prob:: \", problems);\n            const claims = await (0,_checkSolvesLogic__WEBPACK_IMPORTED_MODULE_1__.checkSolvesLogic)(problems, players);\n            // console.log('i guess: ', claims)\n            // Prepare new solves to add\n            // Prepare new solves to add (only those not already in DB)\n            // console.log(\"C: \",claims);\n            const newSolves = [];\n            for (const [key, teamColor] of Object.entries(claims)){\n                const [contestIdStr, index] = key.split('-');\n                const contestId = Number(contestIdStr);\n                // Check if already recorded\n                if (!match.solveLog.some((log)=>log.contestId === contestId && log.index === index)) {\n                    // console.log('i was right!!')\n                    newSolves.push({\n                        handle: '',\n                        team: teamColor,\n                        contestId,\n                        index,\n                        timestamp: new Date(),\n                        matchId: match.id\n                    });\n                }\n            }\n            if (newSolves.length === 0) {\n                // nothing new\n                // return updated:false but include canonical match so client can stay in sync\n                const updatedMatch = await _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.findUnique({\n                    where: {\n                        id: matchId\n                    },\n                    include: {\n                        problems: {\n                            where: {\n                                active: true\n                            },\n                            orderBy: {\n                                position: 'asc'\n                            }\n                        },\n                        teams: {\n                            include: {\n                                members: true\n                            }\n                        },\n                        solveLog: {\n                            include: {\n                                problem: true\n                            }\n                        }\n                    }\n                });\n                return res.status(200).json({\n                    updated: false,\n                    match: updatedMatch\n                });\n            }\n            // For each new solve: create solve log and (if replace mode) replace the problem atomically\n            //  console.log(\"newSolves: \", newSolves);\n            for (const s of newSolves){\n                const { contestId, index, team } = s;\n                // find the *old* problem row (should exist)\n                // Find the *active* problem row that matches the solved contest/index\n                const solvedRow = await _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.problem.findFirst({\n                    where: {\n                        contestId,\n                        index,\n                        matchId,\n                        active: true\n                    }\n                });\n                // If we don't find an active row for this contest/index, try the unique lookup as a fallback\n                const oldProblem = solvedRow ?? await _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.problem.findUnique({\n                    where: {\n                        contestId_index_matchId: {\n                            contestId,\n                            index,\n                            matchId\n                        }\n                    }\n                });\n                // const oldProblem = await prisma.problem.findUnique({\n                //   where: { contestId_index_matchId: { contestId: contestId, index: index, matchId } },\n                // });\n                // create the solve log referencing the old problem (so message uses old problem fields)\n                await _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.solveLog.create({\n                    data: {\n                        handle: '',\n                        team,\n                        contestId,\n                        index,\n                        timestamp: new Date(),\n                        matchId\n                    }\n                });\n                // If replace mode, atomically deactivate old problem and create a new replacement at same position\n                if (match.mode === 'replace' && oldProblem) {\n                    // compute target rating for replacement\n                    const increment = match.replaceIncrement ?? 100;\n                    const newRatingTarget = Math.min(3500, (oldProblem.rating ?? 0) + increment);\n                    const allHandles = match.teams.flatMap((team)=>team.members).flatMap((p)=>p.handle);\n                    // console.log(\"Inc: \", increment);\n                    // fetch candidate replacement from your problem source (getProblems). We'll ask for 1 problem.\n                    const replacementCandidate = await fetchReplacementProblem(problems.map((p)=>String(p.contestId) + p.index), newRatingTarget, newRatingTarget, allHandles);\n                    // console.log(\"REP: \", replacementCandidate);\n                    console.log('done');\n                    console.log('ProBB:: ', problems);\n                    // Do atomic transaction: deactivate old problem and create new one at same position\n                    await _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.$transaction(async (tx)=>{\n                        // mark old problem inactive\n                        await tx.problem.update({\n                            where: {\n                                contestId_index_matchId: {\n                                    contestId: oldProblem.contestId,\n                                    index: oldProblem.index,\n                                    matchId\n                                }\n                            },\n                            data: {\n                                active: false\n                            }\n                        });\n                        // If we found a replacement candidate, create it; otherwise create a placeholder row (you may tweak)\n                        if (replacementCandidate) {\n                            // override rating to newRatingTarget to apply increment rule\n                            await tx.problem.create({\n                                data: {\n                                    contestId: replacementCandidate.contestId ?? 0,\n                                    index: replacementCandidate.index ?? String(Date.now()),\n                                    matchId,\n                                    rating: replacementCandidate?.rating ?? newRatingTarget,\n                                    name: replacementCandidate.name ?? `Problem ${replacementCandidate.index}`,\n                                    position: oldProblem.position,\n                                    active: true\n                                }\n                            });\n                        } else {\n                            // fallback: create a placeholder \"unknown\" problem with computed rating\n                            await tx.problem.create({\n                                data: {\n                                    contestId: 0,\n                                    index: String(Date.now()),\n                                    matchId,\n                                    rating: newRatingTarget,\n                                    name: `Replacement (${newRatingTarget})`,\n                                    position: oldProblem.position,\n                                    active: true\n                                }\n                            });\n                        }\n                    });\n                }\n            }\n        // // Insert new solves if any\n        // if (newSolves.length > 0) {\n        //   await prisma.solveLog.createMany({\n        //     data: newSolves.map(ns => ({\n        //       handle: ns.handle,\n        //       team: ns.team,\n        //       contestId: ns.contestId,\n        //       index: ns.index,\n        //       timestamp: ns.timestamp,\n        //       matchId: ns.matchId,\n        //     }))\n        //   })\n        // }\n        // // ======= Replace logic (if match.mode === 'replace') =======\n        // if (newSolves.length > 0 && match.mode === 'replace') {\n        //   // Prepare list of active problem keys to exclude from replacements\n        //   // only include currently active problems\n        //   const activeProblems = match.problems\n        //     .filter(p => p.active)\n        //     .map(p => `${p.contestId}-${p.index}`)\n        //   // Also add any newly-solved keys so replacements avoid them\n        //   const newlySolvedKeys = newSolves.map(ns => `${ns.contestId}-${ns.index}`)\n        //   activeProblems.push(...newlySolvedKeys)\n        //   // All user handles for exclude checks (same as when creating the match)\n        //   const allHandles = match.teams.flatMap(t => t.members.map(m => m.handle))\n        //   // We'll iterate through newSolves sequentially. For each solved problem:\n        //   for (const solved of newSolves) {\n        //     const solvedKey = `${solved.contestId}-${solved.index}`\n        //     // find the *active* Problem row that matches this contestId/index & matchId\n        //     const oldProblem = match.problems.find(p =>\n        //       p.contestId === solved.contestId &&\n        //       p.index === solved.index &&\n        //       p.active\n        //     )\n        //     if (!oldProblem) {\n        //       // maybe already inactive or not present for this match - skip\n        //       continue\n        //     }\n        //     // mark the old row inactive\n        //     await prisma.problem.updateMany({\n        //       where: {\n        //         contestId: oldProblem.contestId,\n        //         index: oldProblem.index,\n        //         matchId: oldProblem.matchId,\n        //         active: true,\n        //       },\n        //       data: { active: false }\n        //     })\n        //     // Now request one replacement from /api/getProblems\n        //     // Build exclude: all currently-active + newly added\n        //     const excludeList = [...new Set(activeProblems)]\n        //     // Make POST to your getProblems endpoint (local)\n        //     try {\n        //       const resp = await fetch('http://localhost:3000/api/getProblems', {\n        //         method: 'POST',\n        //         headers: { 'Content-Type': 'application/json' },\n        //         body: JSON.stringify({\n        //           userHandles: allHandles,\n        //           minRating: match.minRating ?? undefined,\n        //           maxRating: match.maxRating ?? undefined,\n        //           count: 1,\n        //           exclude: excludeList,\n        //         }),\n        //       })\n        //       if (!resp.ok) {\n        //         console.warn('Replacement getProblems returned not ok', await resp.text())\n        //         // we won't crash — skip replacement for this cell\n        //         continue\n        //       }\n        //       const repData = await resp.json()\n        //       const repProblem = repData.problems?.[0]\n        //       if (!repProblem) {\n        //         // no replacement available — skip creating a new problem\n        //         continue\n        //       }\n        //       // create the new problem with same position and active = true\n        //       await prisma.problem.create({\n        //         data: {\n        //           contestId: repProblem.contestId,\n        //           index: repProblem.index,\n        //           matchId: match.id,\n        //           rating: repProblem.rating ?? 0,\n        //           name: repProblem.name ?? '',\n        //           position: oldProblem.position,\n        //           active: true,\n        //           maxPoints: repProblem.maxPoints ?? undefined, // if IOI\n        //         }\n        //       })\n        //       // add replacement key to activeProblems so later replacements in same run won't pick same\n        //       activeProblems.push(`${repProblem.contestId}-${repProblem.index}`)\n        //     } catch (err) {\n        //       console.error('Replacement failed for', solvedKey, err)\n        //       // continue processing other solves\n        //       continue\n        //     }\n        //   }\n        // } // end replace logic\n        }\n        // refetch match with updated solve logs\n        const updatedMatch = await _src_app_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.findUnique({\n            where: {\n                id: matchId\n            },\n            include: {\n                problems: {\n                    where: {\n                        active: true\n                    },\n                    orderBy: {\n                        position: 'asc'\n                    }\n                },\n                teams: {\n                    include: {\n                        members: true\n                    }\n                },\n                solveLog: {\n                    include: {\n                        problem: true\n                    }\n                }\n            }\n        });\n        return res.status(200).json({\n            updated: true,\n            match: updatedMatch\n        });\n    } catch (err) {\n        console.error('Error in poll-submissions:', err);\n        return res.status(500).json({\n            error: 'Internal server error'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/poll-submissions.ts\n");

/***/ }),

/***/ "(api-node)/./src/app/lib/prisma.ts":
/*!*******************************!*\
  !*** ./src/app/lib/prisma.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// src/app/lib/prisma.ts (or wherever your lib folder is)\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log: [\n        'query'\n    ]\n});\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9hcHAvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx5REFBeUQ7QUFDWDtBQUU5QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQ1hGLGdCQUFnQkUsTUFBTSxJQUN0QixJQUFJSCx3REFBWUEsQ0FBQztJQUNmSSxLQUFLO1FBQUM7S0FBUTtBQUNoQixHQUFHO0FBRUwsSUFBSUMsSUFBcUMsRUFBRUosZ0JBQWdCRSxNQUFNLEdBQUdBIiwic291cmNlcyI6WyJEOlxcYmluZ28tY3BcXGJpbmdvLWNwXFxiaW5nby1jcFxcc3JjXFxhcHBcXGxpYlxccHJpc21hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9hcHAvbGliL3ByaXNtYS50cyAob3Igd2hlcmV2ZXIgeW91ciBsaWIgZm9sZGVyIGlzKVxuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBjb25zdCBwcmlzbWEgPVxuICBnbG9iYWxGb3JQcmlzbWEucHJpc21hID8/XG4gIG5ldyBQcmlzbWFDbGllbnQoe1xuICAgIGxvZzogWydxdWVyeSddLFxuICB9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7XG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsImxvZyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./src/app/lib/prisma.ts\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpoll-submissions&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpoll-submissions.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();